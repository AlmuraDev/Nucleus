/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.modules.invulnerability.InvulnerabilityPermissions;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfig;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import io.github.nucleuspowered.nucleus.scaffold.listener.ListenerBase;
import io.github.nucleuspowered.nucleus.services.INucleusServiceCollection;
import io.github.nucleuspowered.nucleus.services.interfaces.IPermissionService;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.network.ClientConnectionEvent;

import com.google.inject.Inject;

public class InvulnReloadableListener implements ListenerBase.Conditional {

    private final IPermissionService permissionService;
    private final InvulnerabilityService service;

    @Inject
    public InvulnReloadableListener(final INucleusServiceCollection serviceCollection) {
        this.permissionService = serviceCollection.permissionService();
        this.service = serviceCollection.getServiceUnchecked(InvulnerabilityService.class);
    }

    @Listener
    public void onPlayerJoin(final ClientConnectionEvent.Join joinEvent, @Getter("getTargetEntity") final Player player) {
        if (!this.permissionService.hasPermission(player, InvulnerabilityPermissions.BASE_GOD)) {
            this.service.setInvulnerable(player, false);
        }
    }

    @Override
    public boolean shouldEnable(final INucleusServiceCollection serviceCollection) {
        return serviceCollection.configProvider().getModuleConfig(InvulnerabilityConfig.class).isGodPermissionOnLogin();
    }

}
