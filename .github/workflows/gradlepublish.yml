# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: Gradle Package

on:
  push:
    tags:
      - '[2-9]*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Set Github Actions Environment Variable (Version)
      run: ./gradlew setGithubActionsVersion

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run Doc Gen
      run: ./gradlew docGen

    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
    - name: Publish to GitHub Packages
      run: ./gradlew publish
      env:
        USER: ${{ github.actor }}
        KEY: ${{ secrets.GITHUB_TOKEN }}
        REPO: "NucleusPowered/Nucleus"

    - name: Upload Plugin
      uses: actions/upload-artifact@v2
      with:
        name: Nucleus Plugin
        path: output/*-plugin.jar
    - name: Upload API
      uses: actions/upload-artifact@v2
      with:
        name: Nucleus API
        path: output/*-API.jar
    - name: Upload Javadocs
      uses: actions/upload-artifact@v2
      with:
        name: Nucleus Javadocs
        path: output/*-javadocs.jar
    - name: Upload YAML
      uses: actions/upload-artifact@v2
      with:
        name: YML files from DocGen
        path: output/*.yml
    - name: Upload Release Notes
      uses: actions/upload-artifact@v2
      with:
        name: Release Notes
        path: output/*.md
  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout Docs
        with:
          repository: 'NucleusPowered/v2-site'
          ref: 'gh-pages'
          token: '${{ secrets.DOCS_PAT }}'
      - uses: pCYSl5EDgo/cat@master
        name: Read Current YAML Data
        id: inputdata
        with:
          path: '_data/versions.yml'
      - name: Add latest release
        uses: './actions/yamlupdater' # Uses an action in the root directory
        id: latestrel
        with:
          inputyaml: ${{ steps.inputdata.outputs.text }}
          version: ${{ env.nucleus.version }}
      - name: Save updated file
        uses: DamianReeves/write-file-action@v1.0
        with:
          path: '_data/versions.yml'
          contents: ${{ steps.latestrel.outputs.outputyml }}
          write-mode: overwrite
      - name: Delete old docgen files
        run: |
          rm _data/commands.yml
          rm _data/ess.yml
          rm _data/permissions.yml
          rm _data/conf.yml
          rm _data/tokens.yml
      - name: Add new docgen files
        uses: actions/download-artifact@v2
        with:
          name: YML files from DocGen
          path: _data
      - name: Create temp directory
        run: |
          mkdir -p tmp
      - name: Get Javadocs
        uses: actions/download-artifact@v2
        with:
          name: Nucleus Javadocs
          path: tmp
      - name: Unzip Javadocs
        run: |
          mkdir -p javadocs/${{ env.nucleus.version }}
          find tmp -name "*.jar" -exec unzip {} -d javadocs/${{ env.nucleus.version }} \;
          rm tmp/*.jar
      - name: Commit updates
        run: |
          git config --global user.name 'Github Actions Bot'
          git config --global user.email 'dualspiral@users.noreply.github.com'
          git commit -am "Update for ${{ env.nucleus.version }}"
          git push