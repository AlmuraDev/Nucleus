import java.util.function.BiPredicate

plugins {
    id 'idea'
    id 'eclipse'
    id 'com.github.hierynomus.license' version '0.12.1'
    id 'ninja.miserable.blossom' version '1.0.1'
 //   id 'maven'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'java'
    id 'org.spongepowered.plugin' version '0.9.0'
    id "de.undercouch.download" version "4.0.1"
}

allprojects {
    task gitHash {
        def process = 'git rev-parse --short HEAD'.execute()
        process.waitFor()
        ext.hash = process.exitValue() ? 'unknown' : process.text.trim().replace('\n', '')
    }

    task gitCommitMessage(type: Exec) {
        commandLine 'git', 'log', '-1', '--format=%B'
        standardOutput = new ByteArrayOutputStream()
        ext.message = {
            standardOutput.toString().replaceAll('[\\r?\\n]+$', '')
        }
    }

    apply plugin: 'java'
}

enum Level {
    SNAPSHOT( { String suffix, String version -> suffix.endsWith('SNAPSHOT') }, 'snapshot'),
    ALPHA( { String suffix, String version -> suffix.contains('ALPHA') }, 'alpha'),
    BETA( { String suffix, String version -> suffix.contains('BETA') }, 'beta'),
    RELEASE_CANDIDATE( { String suffix, String version -> suffix.contains('RC') }, 'rc'),
    RELEASE_MAJOR( { String suffix, String version -> version.endsWith('.0') }, 'release-big'),
    RELEASE_MINOR( { String suffix, String version -> true }, 'release');

    // suffix, version
    final Closure<Boolean> selectionCriteria
    final String template

    Level(Closure<Boolean> selectionCriteria, String template) {
        this.selectionCriteria = selectionCriteria
        this.template = template
    }
}

static Level getLevel(String suffix, String version) {
    for (Level level : Level.values()) {
        if (level.selectionCriteria(suffix, version)) {
            return level
        }
    }

    // Fallback
    return Level.SNAPSHOT;
}

def apiVersion = '7.2.0-SNAPSHOT'
def declaredApiVersion = '7.1.0'

project.ext.versionno = '2.0.0'
project.ext.minecraftversion = '1.12.2'
project.ext.spongeapiversion = (declaredApiVersion =~ /^\d+\.\d+/)[0]
project.ext.suffix = '-ALPHA-2'
project.ext.hash = ''

String docVer
def level = Level.SNAPSHOT;
/*boolean isSnapshot
boolean isPR
boolean isMajor */

if (project.properties.containsKey('override-doc-ver')) {
    docVer = project.properties.get('override-doc-ver')
    isSnapshot = false
} else {
    docVer = project.ext.versionno + "-S" + project.ext.spongeapiversion
    level = getLevel(project.ext.suffix, project.ext.versionno)
}

// Add Git hash for unique version numbers, but only for non-snapshot versions
if (project.ext.suffix != '') {
    project.ext.hash = '-' + gitHash.hash
}

rootProject.version = project.versionno + project.suffix + '-S' + project.spongeapiversion
if (level == Level.SNAPSHOT && project.hasProperty("appendGit")) {
    rootProject.version += '-' + gitHash.hash
}

project.ext.fileVersion = project.versionno + project.suffix + project.ext.hash + '-S' + project.spongeapiversion

project(":nucleus-api") {
    repositories {
        jcenter()
        maven {
            name 'Sponge maven repo'
            url 'https://repo.spongepowered.org/maven'
        }
    }

    version = rootProject.versionno + rootProject.suffix + '-S' + rootProject.spongeapiversion

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        archiveName = "Nucleus-${version}-api-javadocs.jar"
    }
}

if (!project.hasProperty("nosign")) {
    apply plugin: 'signing'
    apply plugin: 'org.spongepowered.plugin'
    apply plugin: 'org.spongepowered.ore'
}

description = 'The Ultimate Essentials Plugin.'
ext.url = 'http://nucleuspowered.org'

group 'io.github.nucleuspowered'

ext.spongeapi = apiVersion
def qsmlDep = "uk.co.drnaylor:quickstart-moduleloader:0.12.0-SNAPSHOT"
def neutrinoDep = 'io.github.nucleuspowered:neutrino:1.1.6'

defaultTasks 'licenseFormat build'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            exclude 'assets/nucleus/suggestions/**'
        }
    }
}

repositories {
    jcenter()
    maven {
        name 'Sponge maven repo'
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        name 'drnaylor-minecraft'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
    maven {
        name 'drnaylor'
        url 'http://repo.drnaylor.co.uk/artifactory/list/quickstart'
    }
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    compile project(":nucleus-ap")
    compile project(":nucleus-api", {
        ext.versionno = versionno
        ext.suffix = suffix
    })
    compile project(":nucleus-core", {
        ext.versionno = versionno
        ext.suffix = suffix
    })
    compile "org.spongepowered:spongeapi:" + project.ext.spongeapi
    compile "org.spongepowered:configurate-core:3.6.1"
    compile "org.spongepowered:configurate-gson:3.6.1"
    compile "org.spongepowered:configurate-hocon:3.6.1"
    compile qsmlDep
    compile(neutrinoDep) {
        exclude group: 'org.spongepowered', module: 'configurate-core'
    }

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.powermock:powermock-module-junit4:1.6.4"
    testCompile "org.powermock:powermock-api-mockito:1.6.4"
    testCompile "org.hamcrest:hamcrest-junit:2.0.0.0"
}

license {
    ext.name = project.name

    exclude "**/*.info"
    exclude "assets/**"
    exclude "*.properties"
    exclude "*.txt"

    header file('HEADER.txt')
    sourceSets = project.sourceSets

    ignoreFailures false
    strictCheck true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

def getVersion = {
    rootProject.version
}

blossom {
    replaceTokenIn('src/main/java/io/github/nucleuspowered/nucleus/NucleusPluginInfo.java')
    replaceToken '@name@', project.name
    replaceToken '@version@', getVersion

    replaceToken '@description@', project.description
    replaceToken '@url@', project.url
    replaceToken '@gitHash@', gitHash.hash

    replaceToken '@spongeversion@', declaredApiVersion
}

jar {
    manifest {
        attributes  'Implementation-Title': project.name,
                'SpongeAPI-Version': project.spongeapi,
                'Implementation-Version': getVersion(),
                'Git-Hash': gitHash.hash
    }

    archiveName = getVersion
}

shadowJar {
    dependencies {
        include(project(":nucleus-api"))
        include(dependency(qsmlDep))
        include(dependency(neutrinoDep))
    }

    if (!project.hasProperty('norelocate')) {
        relocate 'uk.co.drnaylor', 'io.github.nucleuspowered.relocate.uk.co.drnaylor'
        relocate 'io.github.nucleuspowered.neutrino', 'io.github.nucleuspowered.relocate.nucleus.neutrino'
    }

    exclude "io/github/nucleuspowered/nucleus/api/NucleusAPIMod.class"
    archiveName = "Nucleus-${rootProject.version}-MC${project.ext.minecraftversion}-plugin.jar"
    //shadowJar.archiveName = shadowName
   // archiveName = "Nucleus-${version}-MC${project.ext.minecraftversion}-plugin.jar"
}
shadowJar.dependsOn(':nucleus-api:build')

task cleanJars {
    doLast {
        project.file('output').listFiles().each {
            x ->
                if (x.name.endsWith("jar") || x.name.endsWith("asc") || x.name.endsWith("md")) {
                    x.delete()
                }
        }
    }
}

task copyJars(type: Copy, dependsOn: ':nucleus-api:build') {
    from([project(":nucleus-api").jar, project(":nucleus-api").javadocJar, shadowJar])
    into project.file('output')
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

// Release notes
task relnotes {
    doLast {
        def template = new File('changelogs/templates/' + level.template + '.md').getText("UTF-8")
        File notes = new File('changelogs/templates/' + docVer + '.md')
        String notesText
        if (notes.exists()) {
            notesText = notes.getText("UTF-8")
        } else {
            notesText = 'There are no release notes available.'
        }
        ext.notes = template
                .replace('{{hash}}', gitHash.hash)
                .replace('{{info}}', notesText)
                .replace('{{version}}', project.versionno + project.suffix)
                .replace('{{message}}', gitCommitMessage.message())
                .replace('{{sponge}}', project.ext.spongeapiversion)
    }
}

task printRelNotes(dependsOn: relnotes) {
    doLast {
        println(relnotes.ext.notes)
    }
}

task writeRelNotes(dependsOn: relnotes)  {
    doLast {
        new File("$projectDir/changelogs/${version}.md").text = relnotes.ext.notes
    }
}

task writeRelNotesInOutput(dependsOn: relnotes)  {
    doLast {
        new File("$projectDir/output/${version}.md").text = relnotes.ext.notes
    }
}

task downloadCompat(type: Download) {
    src 'https://nucleuspowered.org/data/nca.json'
    dest new File(buildDir, 'resources/main/assets/nucleus/compat.json')
    onlyIfModified true
}

blossomSourceReplacementJava.dependsOn(gitHash)
jar.dependsOn(gitHash)
relnotes.dependsOn([gitHash, gitCommitMessage])
compileJava.dependsOn(":nucleus-ap:build")
clean.dependsOn(cleanJars)
copyJars.mustRunAfter(cleanJars)
jar.mustRunAfter(downloadCompat)
build.dependsOn(shadowJar)
build.dependsOn(copyJars)
build.dependsOn(writeRelNotesInOutput)